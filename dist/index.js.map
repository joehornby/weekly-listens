{"version":3,"sources":["../index.ts"],"sourcesContent":["import { Octokit } from \"octokit\";\nimport fetch from \"node-fetch\";\nimport eaw from \"eastasianwidth\";\nimport {\n  type LastFMArtistGetInfoResponse,\n  type LastFMUserGetTopArtistsResponse,\n} from \"./types.js\";\nimport {\n  type GetResponseTypeFromEndpointMethod,\n  type GetResponseDataTypeFromEndpointMethod,\n} from \"@octokit/types\";\n\nconst MAX_NUM_ARTISTS = 5;\n\nconst config = {\n  gistId: process.env.GIST_ID,\n  githubToken: process.env.GH_TOKEN,\n  lastfmKey: process.env.LASTFM_KEY,\n  lastfmUsername: process.env.LASTFM_USERNAME,\n};\ntype Config = typeof config;\n\nconst octokit = new Octokit({\n  auth: `${config.githubToken}`,\n});\n\ntype GistResponseType = GetResponseTypeFromEndpointMethod<\n  typeof octokit.rest.gists.get\n>;\ntype GistResponseDataType = GetResponseDataTypeFromEndpointMethod<\n  typeof octokit.rest.gists.get\n>;\n\nasync function main() {\n  // Check for missing environment variables\n  if (\n    !config.gistId ||\n    !config.githubToken ||\n    !config.lastfmKey ||\n    !config.lastfmUsername\n  ) {\n    throw new Error(\"Required env vars are missing\");\n  }\n\n  try {\n    const gist = await getGist(config.gistId);\n    const artists = await getTopArtists(config);\n    const formattedContent = await createTopArtistList(\n      artists,\n      MAX_NUM_ARTISTS,\n      config\n    );\n\n    const title = `ðŸŽ§ This week's soundtrack ${\n      new Date().toISOString().split(\"T\")[0]\n    }`;\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(\"Gist would be updated with this content in production:\\n\");\n      console.log(title);\n      console.log(formattedContent);\n    } else {\n      await updateGist(gist, formattedContent, title, config);\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n  }\n}\n\nasync function getGist<GistResponseDataType>(id: string) {\n  try {\n    return await octokit.rest.gists.get({\n      gist_id: id,\n    });\n  } catch (error) {\n    console.error(`Error fetching gist: ${id}:`, error);\n    throw new Error(\n      `Failed to fetch gist: ${error instanceof Error ? error.message : error}`\n    ); // Re-throw error to handle in main\n  }\n}\n\nasync function getTopArtists(config: Config) {\n  const { lastfmKey, lastfmUsername } = config;\n  const API_BASE =\n    \"http://ws.audioscrobbler.com/2.0/?method=user.gettopartists&format=json&period=7day&\";\n  const API_ENDPOINT = `${API_BASE}user=${lastfmUsername}&api_key=${lastfmKey}&limit=${MAX_NUM_ARTISTS}`;\n  const response = await fetch(API_ENDPOINT);\n  if (!response.ok) {\n    throw new Error(\n      `Last.fm API request failed with status ${response.status}`\n    );\n  }\n  const {\n    topartists: { artist },\n  } = (await response.json()) as LastFMUserGetTopArtistsResponse;\n  return artist;\n}\n\nasync function createTopArtistList(\n  artists: LastFMUserGetTopArtistsResponse[\"topartists\"][\"artist\"],\n  listLength: number,\n  config: Config\n) {\n  const numberOfArtists = Math.min(listLength, artists.length);\n\n  const totalPlays = artists\n    .slice(0, numberOfArtists)\n    .reduce((total, { playcount }) => total + parseInt(playcount, 10), 0);\n\n  const lines = await Promise.all(\n    artists.map(async ({ name, playcount }, index) => {\n      // Find out if artist is new this week\n      const isNewThisWeek = await isArtistNewThisWeek(\n        name,\n        parseInt(playcount, 10),\n        config\n      );\n\n      name = `${name}${isNewThisWeek ? \" *\" : \"\"}`;\n\n      // format table entry\n      name = adjustAndPad(name.substring(0, 25), 26);\n      const plays = parseInt(playcount, 10);\n      const bar = generateChart(plays / totalPlays, 12);\n\n      return `${(index + 1).toString()} ${name} ${bar} ${plays\n        .toString()\n        .padStart(5, \" \")} plays`;\n    })\n  );\n\n  return lines.join(\"\\n\") + `\\n\\n* = new this week`;\n}\n\nfunction adjustAndPad(str: string, maxWidth: number) {\n  const width = eaw.length(str);\n  let adjustedStr = str.slice(0, Math.max(0, str.length - (width - maxWidth)));\n  const paddingNeeded = maxWidth - eaw.length(adjustedStr);\n  return adjustedStr.padEnd(adjustedStr.length + paddingNeeded);\n}\n\nfunction generateChart(fraction: number, size: number) {\n  const position = Math.floor(fraction * size);\n  return \"â€“\".repeat(position) + \"|\" + \"â€“\".repeat(size - position - 1);\n}\n\nasync function isArtistNewThisWeek(\n  name: string,\n  playcount: number,\n  config: Config\n) {\n  const { lastfmKey, lastfmUsername } = config;\n  const API_ENDPOINT = `http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${name}&username=${lastfmUsername}&api_key=${lastfmKey}&format=json`;\n  try {\n    const response = await fetch(API_ENDPOINT);\n    if (!response.ok) {\n      throw new Error(\n        `Last.fm API request failed with status ${response.status}`\n      );\n    }\n    const {\n      artist: {\n        stats: { userplaycount },\n      },\n    } = (await response.json()) as LastFMArtistGetInfoResponse;\n\n    return (\n      userplaycount !== undefined && playcount === parseInt(userplaycount, 10)\n    );\n  } catch {\n    console.error(`Failed to check if ${name} is new this week`);\n    return false;\n  }\n}\n\nasync function updateGist(\n  gist: GetResponseTypeFromEndpointMethod<typeof octokit.rest.gists.get>,\n  content: string,\n  config: Config\n) {\n  try {\n    const filename = gist.data.files ? Object.keys(gist.data.files)[0] : \"\";\n\n    await octokit.rest.gists.update({\n      gist_id: config.gistId!,\n      files: {\n        [filename]: {\n          filename: `ðŸŽ§ This week's soundtrack ${\n            new Date().toISOString().split(\"T\")[0]\n          }`,\n          content,\n        },\n      },\n    });\n  } catch (error) {\n    console.error(`Unable to update gist:\\n${error}`);\n    throw new Error(\n      `Failed to update gist: ${error instanceof Error ? error.message : error}`\n    ); // Re-throw error to handle in main\n  }\n}\n\n(async () => {\n  await main();\n})();\n"],"mappings":"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","names":["config"]}